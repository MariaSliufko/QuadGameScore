@using QuadGameScore.Data;
@using QuadGameScore.Models;
@using Blazorise;
@using Blazorise.Bootstrap;
@using Blazorise.Icons.FontAwesome;
@using FluentValidation;
@using QuadGameScore.Validators;

@page "/gameList"
@inject QuadGameScoreDbContext _dbContext;
@inject QuadGameScoreRepository repository;
@inject NavigationManager NavigationManager;

<h3 class="text-primary mb-5">Grenar</h3>

<!-- Visa lista på event -->
<h4 class="text-primary">Gren</h4>
@if (games != null && games.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Namn</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var gme in games)
            {
                <tr>
                    <td>@gme.Name</td>
                    <td>
                        <Blazorise.Button Color="Color.Danger" Clicked="() => RemoveGame(gme)">Ta bort</Blazorise.Button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Inga spel hittades.</p>
}

<!-- Lägg till händelse -->


<EditForm Model="@newGame" OnValidSubmit="AddEvent">
    <Blazorise.Field>
        <Blazorise.FieldLabel for="gameName" class="text-primary">Gren:</Blazorise.FieldLabel>
        <Blazorise.Control>
            <input type="text" id="gameName" class="form-control" @bind="@newGame.Name" />
            <ValidationMessage For="@(() => newGame.Name)" />
        </Blazorise.Control>
        <Blazorise.FieldHelp>Example help text</Blazorise.FieldHelp>
        <Blazorise.FieldHelpValid>Bågskytte</Blazorise.FieldHelpValid>
        <InlineMessage ErrorMessage="@errorMessage" />
    </Blazorise.Field>

    <Blazorise.FieldButton>
        <button class="btn btn-primary" type="submit">Lägg till</button>
    </Blazorise.FieldButton>
</EditForm>
<BlazoredToastContainer />

@code {
    private List<Game> games;
    private Game newGame = new Game("");
    private GameValidator validator = new GameValidator();
    private string errorMessage;

    protected override void OnInitialized()
    {
        games = repository.GetGames();
    }

    private void AddEvent()
    {
        var validationResult = validator.Validate(newGame);

        if (validationResult.IsValid)
        {
            var game = new Game(newGame.Name);
            repository.AddGame(game);
            newGame = new Game(""); // Återställ formuläret genom att skapa en ny Game-instans
            games = repository.GetGames();
        }
        else
        {
            errorMessage = validationResult.Errors.FirstOrDefault()?.ErrorMessage;
        }

    }

    private void RemoveGame(Game game)
    {
        repository.RemoveGame(game);
        games = repository.GetGames();
    }
}
