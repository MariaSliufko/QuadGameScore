@using QuadGameScore.Data
@using QuadGameScore.Models
@using Blazorise
@page "/score"
@inject QuadGameScoreDbContext _dbContext
@inject QuadGameScoreRepository repository
@inject NavigationManager NavigationManager

<h3 class="text-primary mb-5">Poängtilldelning</h3>

<!-- Visa spelarlista -->
<div class="row">
    <div class="col-md-6">
        <h4 class="text-primary">Spelare</h4>
        @if (players != null && players.Any())
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th scope="col">Namn</th>
                        <th scope="col">Poäng</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var player in players)
                    {
                        <tr>
                            <td>@player.Name</td>
                            <td>@player.Points</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>Inga spelare hittades.</p>
        }
    </div>



    <!-- Visa lista över evenemang -->
    <div class="col-md-6 mb-5">
        <h4 class="text-primary">Evenemang</h4>
        @if (games != null && games.Any())
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th scope="col">Namn</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var game in games)
                    {
                        <tr>
                            <td>@game.Name</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>Inga evenemang hittades.</p>
        }
    </div>
</div>

<!-- Inmatningsfält för spelare, evenemang och poäng -->
<h4 class="text-primary">Tilldela poäng</h4>

<Columns>
    <Column Size="ColumnSize.Is6">
        <Blazorise.Field>
            <Blazorise.FieldLabel for="playerName">Spelare:</Blazorise.FieldLabel>
            <Blazorise.Control>
                <input type="text" id="playerName" class="form-control" @bind="@playerName" />
            </Blazorise.Control>
        </Blazorise.Field>

        <Blazorise.Field>
            <Blazorise.FieldLabel for="eventName">Evenemang:</Blazorise.FieldLabel>
            <Blazorise.Control>
                <input type="text" id="eventName" class="form-control" @bind="@gameName" />
            </Blazorise.Control>
        </Blazorise.Field>

        <Blazorise.Field>
            <Blazorise.FieldLabel for="points">Poäng:</Blazorise.FieldLabel>
            <Blazorise.Control>
                <input type="number" id="points" class="form-control" @bind="@points" />
            </Blazorise.Control>
        </Blazorise.Field>
    </Column>

    <Column Size="ColumnSize.Is6">
        <Blazorise.Button Color="Color.Primary" Clicked="AssignPoints">Tilldela</Blazorise.Button>
        <Blazorise.Button Color="Color.Primary" Clicked="FinishQuadathlon">Avsluta fyrkampen</Blazorise.Button>
    </Column>
</Columns>



@code {
    private List<Player> players;
    private List<Game> games;
    private string playerName;
    private string gameName;
    private int points;

    protected override void OnInitialized()
    {
        // Hämta spelarlista och lista över evenemang från databasen
        players = repository.GetPlayers();
        games = repository.GetGames();
    }

    private void AssignPoints()
    {
        // Hitta spelaren baserat på spelarnamnet
        var player = players.FirstOrDefault(p => p.Name == playerName);

        // Hitta evenemanget baserat på evenemangsnamnet
        var game = games.FirstOrDefault(g => g.Name == gameName);

        // Kontrollera om spelaren och evenemanget hittades
        if (player != null && game != null)
        {
            // Tilldela poäng till spelaren för det angivna evenemanget
            repository.AssignPointsToPlayer(player.PlayerId, game.GameId, points);

            // Uppdatera poängen i spelarobjektet
            player.Points += points;
        }

        // Återställ inmatningsfälten
        playerName = string.Empty;
        gameName = string.Empty;
        points = 0;
    }

    private void FinishQuadathlon()
    {
        // Anropa metoden i repository för att avsluta 4-kampen och räkna ut vinnaren
        repository.GetWinners();

        // Navigera till slutskärmen
        NavigationManager.NavigateTo("/winner");
    }
}
